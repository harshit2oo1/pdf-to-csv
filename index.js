const express = require("express");
const fileUpload = require("express-fileupload");
const pdf2table = require("pdf2table");
const fs = require("fs");
const path = require("path");
const { createObjectCsvWriter } = require("csv-writer");

const app = express();

app.use("/", express.static("public"));
app.use(fileUpload());

// // Function to generate HTML table from parsed rows
// function generateHTMLTable(rows) {
//   let html = "<table border='1'><thead><tr>";
//   const headings = [
//     "Sr No.",
//     "Date of Encashment",
//     "Name of the Political Party",
//     "Account no. of Political Party",
//     "Prefix",
//     "Bond Number",
//     "Denominations",
//     "Pay Branch Code",
//     "Pay Teller"
//   ];
//   headings.forEach((heading) => {
//     html += `<th>${heading}</th>`;
//   });
//   html += "</tr></thead><tbody>";

//   // Skip the first row (heading row generated by pdf2table)
//   rows.slice(1).forEach((row) => {
//     html += "<tr>";
//     row.forEach((cell) => {
//       html += `<td>${cell}</td>`;
//     });
//     html += "</tr>";
//   });
//   html += "</tbody></table>";
//   return html;
// }
function generateHTMLTable(rows) {
    let html = "<table border='1'>";
    rows.forEach(row => {
        html += "<tr>";
        row.forEach(cell => {
            html += `<td>${cell}</td>`;
        });
        html += "</tr>";
    });
    html += "</table>";
    return html;
}

// Function to generate CSV from parsed rows
// function generateCSV(rows) {
//   const csvWriter = createObjectCsvWriter({
//     path: path.join(__dirname, "public", "output.csv"),
//     header: [
//       { id: "srNo", title: "Sr No." },
//       { id: "dateOfEncashment", title: "Date of Encashment" },
//      { id: "nameOfPoliticalParty", title: "Name of the Political Party" },
//       { id: "accountNumber", title: "Account no. of Political Party" },
//       { id: "prefix", title: "Prefix" },
//       { id: "bondNumber", title: "Bond Number" },
//       { id: "denominations", title: "Denominations" },
//       { id: "payBranchCode", title: "Pay Branch Code" },
//       { id: "payTeller", title: "Pay Teller" },
//     ],
//   });

//   // Skip the first row (heading row generated by pdf2table)
//   const csvRows = rows.slice(1).map((row, index) => ({
//     srNo: index + 1,
//     dateOfEncashment: row[1],
//     nameOfPoliticalParty: row[2],
//     accountNumber: row[3],
//     prefix: row[4],
//     bondNumber: row[5],
//     denominations: row[6],
//     payBranchCode: row[7],
//     payTeller: row[8],
//   }));

//   return csvWriter.writeRecords(csvRows);
// }
function generateCSV(rows) {
    const csvWriter = createObjectCsvWriter({
      path: path.join(__dirname, "public", "output.csv"),
      header: rows[0].map((cell, index) => ({ id: `column${index}`, title: cell })),
    });
  
    const csvRows = [];
  
    // Add the data rows
    rows.slice(1).forEach((row, index) => {
      const rowData = {};
      row.forEach((cell, cellIndex) => {
        rowData[`column${cellIndex}`] = cell;
      });
      rowData.srNo = index + 1;
      csvRows.push(rowData);
    });
  
    return csvWriter.writeRecords(csvRows);
  }

app.post("/extract-text", (req, res) => {
  if (!req.files || !req.files.pdfFile) {
    res.status(400).send("No file uploaded.");
    return;
  }

  const uploadedFile = req.files.pdfFile;
  const fileName = Date.now() + "-" + uploadedFile.name;
  const uploadPath = path.join(__dirname, "public", fileName);

  uploadedFile.mv(uploadPath, (err) => {
    if (err) {
      console.error(err);
      res.status(500).send("Error uploading file.");
      return;
    }

    fs.readFile(uploadPath, (err, buffer) => {
      if (err) {
        console.error(err);
        res.status(500).send("Error reading uploaded file.");
        return;
      }

      pdf2table.parse(buffer, (err, rows, rowsdebug) => {
        if (err) {
          console.error(err);
          res.status(500).send("Error parsing PDF.");
          return;
        }

        const htmlTable = generateHTMLTable(rows);
        res.send(htmlTable);

        // Generate CSV and save it to the public folder
        generateCSV(rows).then(() => {
          console.log("CSV file generated and saved.");
        });
      });
    });
  });
});

app.get("/download-csv", (req, res) => {
  const filePath = path.join(__dirname, "public", "output.csv");
  res.download(filePath, "output.csv");
});

app.listen(3000, () => {
  console.log("Server is running on port 3000");
});